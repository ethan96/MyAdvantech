'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="MyAdvantechGlobal")>  _
Partial Public Class MyChampionClubDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertChampionClub_File(instance As ChampionClub_File)
    End Sub
  Partial Private Sub UpdateChampionClub_File(instance As ChampionClub_File)
    End Sub
  Partial Private Sub DeleteChampionClub_File(instance As ChampionClub_File)
    End Sub
  Partial Private Sub InsertChampionClub_PCP_Marcom(instance As ChampionClub_PCP_Marcom)
    End Sub
  Partial Private Sub UpdateChampionClub_PCP_Marcom(instance As ChampionClub_PCP_Marcom)
    End Sub
  Partial Private Sub DeleteChampionClub_PCP_Marcom(instance As ChampionClub_PCP_Marcom)
    End Sub
  Partial Private Sub InsertChampionClub_Action_Achievement(instance As ChampionClub_Action_Achievement)
    End Sub
  Partial Private Sub UpdateChampionClub_Action_Achievement(instance As ChampionClub_Action_Achievement)
    End Sub
  Partial Private Sub DeleteChampionClub_Action_Achievement(instance As ChampionClub_Action_Achievement)
    End Sub
  Partial Private Sub InsertChampionClub_Action(instance As ChampionClub_Action)
    End Sub
  Partial Private Sub UpdateChampionClub_Action(instance As ChampionClub_Action)
    End Sub
  Partial Private Sub DeleteChampionClub_Action(instance As ChampionClub_Action)
    End Sub
  Partial Private Sub InsertChampionClub_PersonalInfo(instance As ChampionClub_PersonalInfo)
    End Sub
  Partial Private Sub UpdateChampionClub_PersonalInfo(instance As ChampionClub_PersonalInfo)
    End Sub
  Partial Private Sub DeleteChampionClub_PersonalInfo(instance As ChampionClub_PersonalInfo)
    End Sub
  Partial Private Sub InsertChampionClub_Prize(instance As ChampionClub_Prize)
    End Sub
  Partial Private Sub UpdateChampionClub_Prize(instance As ChampionClub_Prize)
    End Sub
  Partial Private Sub DeleteChampionClub_Prize(instance As ChampionClub_Prize)
    End Sub
  Partial Private Sub InsertChampionClub_SendMail_History(instance As ChampionClub_SendMail_History)
    End Sub
  Partial Private Sub UpdateChampionClub_SendMail_History(instance As ChampionClub_SendMail_History)
    End Sub
  Partial Private Sub DeleteChampionClub_SendMail_History(instance As ChampionClub_SendMail_History)
    End Sub
  Partial Private Sub InsertChampionClub_Reddem(instance As ChampionClub_Reddem)
    End Sub
  Partial Private Sub UpdateChampionClub_Reddem(instance As ChampionClub_Reddem)
    End Sub
  Partial Private Sub DeleteChampionClub_Reddem(instance As ChampionClub_Reddem)
    End Sub
  Partial Private Sub InsertChampionClub_Admin(instance As ChampionClub_Admin)
    End Sub
  Partial Private Sub UpdateChampionClub_Admin(instance As ChampionClub_Admin)
    End Sub
  Partial Private Sub DeleteChampionClub_Admin(instance As ChampionClub_Admin)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("MyAdvantechGlobalConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ChampionClub_Files() As System.Data.Linq.Table(Of ChampionClub_File)
		Get
			Return Me.GetTable(Of ChampionClub_File)
		End Get
	End Property
	
	Public ReadOnly Property ChampionClub_PCP_Marcoms() As System.Data.Linq.Table(Of ChampionClub_PCP_Marcom)
		Get
			Return Me.GetTable(Of ChampionClub_PCP_Marcom)
		End Get
	End Property
	
	Public ReadOnly Property ChampionClub_Action_Achievements() As System.Data.Linq.Table(Of ChampionClub_Action_Achievement)
		Get
			Return Me.GetTable(Of ChampionClub_Action_Achievement)
		End Get
	End Property
	
	Public ReadOnly Property ChampionClub_Actions() As System.Data.Linq.Table(Of ChampionClub_Action)
		Get
			Return Me.GetTable(Of ChampionClub_Action)
		End Get
	End Property
	
	Public ReadOnly Property ChampionClub_PersonalInfos() As System.Data.Linq.Table(Of ChampionClub_PersonalInfo)
		Get
			Return Me.GetTable(Of ChampionClub_PersonalInfo)
		End Get
	End Property
	
	Public ReadOnly Property ChampionClub_Prizes() As System.Data.Linq.Table(Of ChampionClub_Prize)
		Get
			Return Me.GetTable(Of ChampionClub_Prize)
		End Get
	End Property
	
	Public ReadOnly Property ChampionClub_SendMail_Histories() As System.Data.Linq.Table(Of ChampionClub_SendMail_History)
		Get
			Return Me.GetTable(Of ChampionClub_SendMail_History)
		End Get
	End Property
	
	Public ReadOnly Property ChampionClub_Reddems() As System.Data.Linq.Table(Of ChampionClub_Reddem)
		Get
			Return Me.GetTable(Of ChampionClub_Reddem)
		End Get
	End Property
	
	Public ReadOnly Property ChampionClub_Admins() As System.Data.Linq.Table(Of ChampionClub_Admin)
		Get
			Return Me.GetTable(Of ChampionClub_Admin)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChampionClub_Files")>  _
Partial Public Class ChampionClub_File
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FileID As Integer
	
	Private _FileBits As System.Data.Linq.Binary
	
	Private _File_Name As String
	
	Private _File_Size As System.Nullable(Of Integer)
	
	Private _File_Ext As String
	
	Private _File_CreateBy As String
	
	Private _File_CreateTime As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFileIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFileIDChanged()
    End Sub
    Partial Private Sub OnFileBitsChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFileBitsChanged()
    End Sub
    Partial Private Sub OnFile_NameChanging(value As String)
    End Sub
    Partial Private Sub OnFile_NameChanged()
    End Sub
    Partial Private Sub OnFile_SizeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFile_SizeChanged()
    End Sub
    Partial Private Sub OnFile_ExtChanging(value As String)
    End Sub
    Partial Private Sub OnFile_ExtChanged()
    End Sub
    Partial Private Sub OnFile_CreateByChanging(value As String)
    End Sub
    Partial Private Sub OnFile_CreateByChanged()
    End Sub
    Partial Private Sub OnFile_CreateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFile_CreateTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FileID() As Integer
		Get
			Return Me._FileID
		End Get
		Set
			If ((Me._FileID = value)  _
						= false) Then
				Me.OnFileIDChanging(value)
				Me.SendPropertyChanging
				Me._FileID = value
				Me.SendPropertyChanged("FileID")
				Me.OnFileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileBits", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FileBits() As System.Data.Linq.Binary
		Get
			Return Me._FileBits
		End Get
		Set
			If (Object.Equals(Me._FileBits, value) = false) Then
				Me.OnFileBitsChanging(value)
				Me.SendPropertyChanging
				Me._FileBits = value
				Me.SendPropertyChanged("FileBits")
				Me.OnFileBitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_File_Name", DbType:="NVarChar(200)")>  _
	Public Property File_Name() As String
		Get
			Return Me._File_Name
		End Get
		Set
			If (String.Equals(Me._File_Name, value) = false) Then
				Me.OnFile_NameChanging(value)
				Me.SendPropertyChanging
				Me._File_Name = value
				Me.SendPropertyChanged("File_Name")
				Me.OnFile_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_File_Size", DbType:="Int")>  _
	Public Property File_Size() As System.Nullable(Of Integer)
		Get
			Return Me._File_Size
		End Get
		Set
			If (Me._File_Size.Equals(value) = false) Then
				Me.OnFile_SizeChanging(value)
				Me.SendPropertyChanging
				Me._File_Size = value
				Me.SendPropertyChanged("File_Size")
				Me.OnFile_SizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_File_Ext", DbType:="NVarChar(10)")>  _
	Public Property File_Ext() As String
		Get
			Return Me._File_Ext
		End Get
		Set
			If (String.Equals(Me._File_Ext, value) = false) Then
				Me.OnFile_ExtChanging(value)
				Me.SendPropertyChanging
				Me._File_Ext = value
				Me.SendPropertyChanged("File_Ext")
				Me.OnFile_ExtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_File_CreateBy", DbType:="NVarChar(80)")>  _
	Public Property File_CreateBy() As String
		Get
			Return Me._File_CreateBy
		End Get
		Set
			If (String.Equals(Me._File_CreateBy, value) = false) Then
				Me.OnFile_CreateByChanging(value)
				Me.SendPropertyChanging
				Me._File_CreateBy = value
				Me.SendPropertyChanged("File_CreateBy")
				Me.OnFile_CreateByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_File_CreateTime", DbType:="DateTime")>  _
	Public Property File_CreateTime() As System.Nullable(Of Date)
		Get
			Return Me._File_CreateTime
		End Get
		Set
			If (Me._File_CreateTime.Equals(value) = false) Then
				Me.OnFile_CreateTimeChanging(value)
				Me.SendPropertyChanging
				Me._File_CreateTime = value
				Me.SendPropertyChanged("File_CreateTime")
				Me.OnFile_CreateTimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChampionClub_PCP_Marcom")>  _
Partial Public Class ChampionClub_PCP_Marcom
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As String
	
	Private _CompanyID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnCompanyIDChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(80) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyID", DbType:="NVarChar(20)")>  _
	Public Property CompanyID() As String
		Get
			Return Me._CompanyID
		End Get
		Set
			If (String.Equals(Me._CompanyID, value) = false) Then
				Me.OnCompanyIDChanging(value)
				Me.SendPropertyChanging
				Me._CompanyID = value
				Me.SendPropertyChanged("CompanyID")
				Me.OnCompanyIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChampionClub_Action_Achievement")>  _
Partial Public Class ChampionClub_Action_Achievement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ACTION_ID As Integer
	
	Private _RULE_ID As Integer
	
	Private _ACHIEVEMENT As String
	
	Private _POINT As String
	
	Private _CREATED_BY As String
	
	Private _CREATED_DATE As System.Nullable(Of Date)
	
	Private _UPLOADED_BY As String
	
	Private _UPLOADED_DATE As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnACTION_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnACTION_IDChanged()
    End Sub
    Partial Private Sub OnRULE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRULE_IDChanged()
    End Sub
    Partial Private Sub OnACHIEVEMENTChanging(value As String)
    End Sub
    Partial Private Sub OnACHIEVEMENTChanged()
    End Sub
    Partial Private Sub OnPOINTChanging(value As String)
    End Sub
    Partial Private Sub OnPOINTChanged()
    End Sub
    Partial Private Sub OnCREATED_BYChanging(value As String)
    End Sub
    Partial Private Sub OnCREATED_BYChanged()
    End Sub
    Partial Private Sub OnCREATED_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCREATED_DATEChanged()
    End Sub
    Partial Private Sub OnUPLOADED_BYChanging(value As String)
    End Sub
    Partial Private Sub OnUPLOADED_BYChanged()
    End Sub
    Partial Private Sub OnUPLOADED_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUPLOADED_DATEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTION_ID", DbType:="Int NOT NULL")>  _
	Public Property ACTION_ID() As Integer
		Get
			Return Me._ACTION_ID
		End Get
		Set
			If ((Me._ACTION_ID = value)  _
						= false) Then
				Me.OnACTION_IDChanging(value)
				Me.SendPropertyChanging
				Me._ACTION_ID = value
				Me.SendPropertyChanged("ACTION_ID")
				Me.OnACTION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RULE_ID", DbType:="Int NOT NULL")>  _
	Public Property RULE_ID() As Integer
		Get
			Return Me._RULE_ID
		End Get
		Set
			If ((Me._RULE_ID = value)  _
						= false) Then
				Me.OnRULE_IDChanging(value)
				Me.SendPropertyChanging
				Me._RULE_ID = value
				Me.SendPropertyChanged("RULE_ID")
				Me.OnRULE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACHIEVEMENT", DbType:="NVarChar(50)")>  _
	Public Property ACHIEVEMENT() As String
		Get
			Return Me._ACHIEVEMENT
		End Get
		Set
			If (String.Equals(Me._ACHIEVEMENT, value) = false) Then
				Me.OnACHIEVEMENTChanging(value)
				Me.SendPropertyChanging
				Me._ACHIEVEMENT = value
				Me.SendPropertyChanged("ACHIEVEMENT")
				Me.OnACHIEVEMENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POINT", DbType:="NVarChar(50)")>  _
	Public Property POINT() As String
		Get
			Return Me._POINT
		End Get
		Set
			If (String.Equals(Me._POINT, value) = false) Then
				Me.OnPOINTChanging(value)
				Me.SendPropertyChanging
				Me._POINT = value
				Me.SendPropertyChanged("POINT")
				Me.OnPOINTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATED_BY", DbType:="VarChar(200)")>  _
	Public Property CREATED_BY() As String
		Get
			Return Me._CREATED_BY
		End Get
		Set
			If (String.Equals(Me._CREATED_BY, value) = false) Then
				Me.OnCREATED_BYChanging(value)
				Me.SendPropertyChanging
				Me._CREATED_BY = value
				Me.SendPropertyChanged("CREATED_BY")
				Me.OnCREATED_BYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATED_DATE", DbType:="DateTime")>  _
	Public Property CREATED_DATE() As System.Nullable(Of Date)
		Get
			Return Me._CREATED_DATE
		End Get
		Set
			If (Me._CREATED_DATE.Equals(value) = false) Then
				Me.OnCREATED_DATEChanging(value)
				Me.SendPropertyChanging
				Me._CREATED_DATE = value
				Me.SendPropertyChanged("CREATED_DATE")
				Me.OnCREATED_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UPLOADED_BY", DbType:="VarChar(200)")>  _
	Public Property UPLOADED_BY() As String
		Get
			Return Me._UPLOADED_BY
		End Get
		Set
			If (String.Equals(Me._UPLOADED_BY, value) = false) Then
				Me.OnUPLOADED_BYChanging(value)
				Me.SendPropertyChanging
				Me._UPLOADED_BY = value
				Me.SendPropertyChanged("UPLOADED_BY")
				Me.OnUPLOADED_BYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UPLOADED_DATE", DbType:="DateTime")>  _
	Public Property UPLOADED_DATE() As System.Nullable(Of Date)
		Get
			Return Me._UPLOADED_DATE
		End Get
		Set
			If (Me._UPLOADED_DATE.Equals(value) = false) Then
				Me.OnUPLOADED_DATEChanging(value)
				Me.SendPropertyChanging
				Me._UPLOADED_DATE = value
				Me.SendPropertyChanged("UPLOADED_DATE")
				Me.OnUPLOADED_DATEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChampionClub_Action")>  _
Partial Public Class ChampionClub_Action
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Description As String
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _FileID As System.Nullable(Of Integer)
	
	Private _Points As System.Nullable(Of Double)
	
	Private _MarcomComments As String
	
	Private _CreateBy As String
	
	Private _CreateTime As System.Nullable(Of Date)
	
	Private _RevenueAchievement As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnFileIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFileIDChanged()
    End Sub
    Partial Private Sub OnPointsChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPointsChanged()
    End Sub
    Partial Private Sub OnMarcomCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnMarcomCommentsChanged()
    End Sub
    Partial Private Sub OnCreateByChanging(value As String)
    End Sub
    Partial Private Sub OnCreateByChanged()
    End Sub
    Partial Private Sub OnCreateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateTimeChanged()
    End Sub
    Partial Private Sub OnRevenueAchievementChanging(value As String)
    End Sub
    Partial Private Sub OnRevenueAchievementChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(500)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileID", DbType:="Int")>  _
	Public Property FileID() As System.Nullable(Of Integer)
		Get
			Return Me._FileID
		End Get
		Set
			If (Me._FileID.Equals(value) = false) Then
				Me.OnFileIDChanging(value)
				Me.SendPropertyChanging
				Me._FileID = value
				Me.SendPropertyChanged("FileID")
				Me.OnFileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Points", DbType:="Float")>  _
	Public Property Points() As System.Nullable(Of Double)
		Get
			Return Me._Points
		End Get
		Set
			If (Me._Points.Equals(value) = false) Then
				Me.OnPointsChanging(value)
				Me.SendPropertyChanging
				Me._Points = value
				Me.SendPropertyChanged("Points")
				Me.OnPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarcomComments", DbType:="NVarChar(500)")>  _
	Public Property MarcomComments() As String
		Get
			Return Me._MarcomComments
		End Get
		Set
			If (String.Equals(Me._MarcomComments, value) = false) Then
				Me.OnMarcomCommentsChanging(value)
				Me.SendPropertyChanging
				Me._MarcomComments = value
				Me.SendPropertyChanged("MarcomComments")
				Me.OnMarcomCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateBy", DbType:="NVarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property CreateBy() As String
		Get
			Return Me._CreateBy
		End Get
		Set
			If (String.Equals(Me._CreateBy, value) = false) Then
				Me.OnCreateByChanging(value)
				Me.SendPropertyChanging
				Me._CreateBy = value
				Me.SendPropertyChanged("CreateBy")
				Me.OnCreateByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateTime", DbType:="DateTime")>  _
	Public Property CreateTime() As System.Nullable(Of Date)
		Get
			Return Me._CreateTime
		End Get
		Set
			If (Me._CreateTime.Equals(value) = false) Then
				Me.OnCreateTimeChanging(value)
				Me.SendPropertyChanging
				Me._CreateTime = value
				Me.SendPropertyChanged("CreateTime")
				Me.OnCreateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueAchievement", DbType:="NVarChar(50)")>  _
	Public Property RevenueAchievement() As String
		Get
			Return Me._RevenueAchievement
		End Get
		Set
			If (String.Equals(Me._RevenueAchievement, value) = false) Then
				Me.OnRevenueAchievementChanging(value)
				Me.SendPropertyChanging
				Me._RevenueAchievement = value
				Me.SendPropertyChanged("RevenueAchievement")
				Me.OnRevenueAchievementChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChampionClub_PersonalInfo")>  _
Partial Public Class ChampionClub_PersonalInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As String
	
	Private _LastName As String
	
	Private _FirstName As String
	
	Private _ErpID As String
	
	Private _ORG As String
	
	Private _Stype As System.Nullable(Of Boolean)
	
	Private _Address1 As String
	
	Private _Address2 As String
	
	Private _Country As String
	
	Private _City As String
	
	Private _State As String
	
	Private _ZipCode As String
	
	Private _Telephone As String
	
	Private _CREATED_BY As String
	
	Private _CREATED_Date As System.Nullable(Of Date)
	
	Private _LAST_UPD_BY As String
	
	Private _LAST_UPD_DATE As System.Nullable(Of Date)
	
	Private _JobTitle As String
	
	Private _CompanyName As String
	
	Private _PD_Group As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnErpIDChanging(value As String)
    End Sub
    Partial Private Sub OnErpIDChanged()
    End Sub
    Partial Private Sub OnORGChanging(value As String)
    End Sub
    Partial Private Sub OnORGChanged()
    End Sub
    Partial Private Sub OnStypeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnStypeChanged()
    End Sub
    Partial Private Sub OnAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnAddress1Changed()
    End Sub
    Partial Private Sub OnAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnAddress2Changed()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnZipCodeChanging(value As String)
    End Sub
    Partial Private Sub OnZipCodeChanged()
    End Sub
    Partial Private Sub OnTelephoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelephoneChanged()
    End Sub
    Partial Private Sub OnCREATED_BYChanging(value As String)
    End Sub
    Partial Private Sub OnCREATED_BYChanged()
    End Sub
    Partial Private Sub OnCREATED_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCREATED_DateChanged()
    End Sub
    Partial Private Sub OnLAST_UPD_BYChanging(value As String)
    End Sub
    Partial Private Sub OnLAST_UPD_BYChanged()
    End Sub
    Partial Private Sub OnLAST_UPD_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLAST_UPD_DATEChanged()
    End Sub
    Partial Private Sub OnJobTitleChanging(value As String)
    End Sub
    Partial Private Sub OnJobTitleChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnPD_GroupChanging(value As String)
    End Sub
    Partial Private Sub OnPD_GroupChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(80) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErpID", DbType:="NVarChar(20)")>  _
	Public Property ErpID() As String
		Get
			Return Me._ErpID
		End Get
		Set
			If (String.Equals(Me._ErpID, value) = false) Then
				Me.OnErpIDChanging(value)
				Me.SendPropertyChanging
				Me._ErpID = value
				Me.SendPropertyChanged("ErpID")
				Me.OnErpIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORG", DbType:="NVarChar(10)")>  _
	Public Property ORG() As String
		Get
			Return Me._ORG
		End Get
		Set
			If (String.Equals(Me._ORG, value) = false) Then
				Me.OnORGChanging(value)
				Me.SendPropertyChanging
				Me._ORG = value
				Me.SendPropertyChanged("ORG")
				Me.OnORGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stype", DbType:="Bit")>  _
	Public Property Stype() As System.Nullable(Of Boolean)
		Get
			Return Me._Stype
		End Get
		Set
			If (Me._Stype.Equals(value) = false) Then
				Me.OnStypeChanging(value)
				Me.SendPropertyChanging
				Me._Stype = value
				Me.SendPropertyChanged("Stype")
				Me.OnStypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(300)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me.OnAddress1Changing(value)
				Me.SendPropertyChanging
				Me._Address1 = value
				Me.SendPropertyChanged("Address1")
				Me.OnAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="NVarChar(300)")>  _
	Public Property Address2() As String
		Get
			Return Me._Address2
		End Get
		Set
			If (String.Equals(Me._Address2, value) = false) Then
				Me.OnAddress2Changing(value)
				Me.SendPropertyChanging
				Me._Address2 = value
				Me.SendPropertyChanged("Address2")
				Me.OnAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(50)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZipCode", DbType:="NVarChar(30)")>  _
	Public Property ZipCode() As String
		Get
			Return Me._ZipCode
		End Get
		Set
			If (String.Equals(Me._ZipCode, value) = false) Then
				Me.OnZipCodeChanging(value)
				Me.SendPropertyChanging
				Me._ZipCode = value
				Me.SendPropertyChanged("ZipCode")
				Me.OnZipCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telephone", DbType:="NVarChar(30)")>  _
	Public Property Telephone() As String
		Get
			Return Me._Telephone
		End Get
		Set
			If (String.Equals(Me._Telephone, value) = false) Then
				Me.OnTelephoneChanging(value)
				Me.SendPropertyChanging
				Me._Telephone = value
				Me.SendPropertyChanged("Telephone")
				Me.OnTelephoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATED_BY", DbType:="NVarChar(80)")>  _
	Public Property CREATED_BY() As String
		Get
			Return Me._CREATED_BY
		End Get
		Set
			If (String.Equals(Me._CREATED_BY, value) = false) Then
				Me.OnCREATED_BYChanging(value)
				Me.SendPropertyChanging
				Me._CREATED_BY = value
				Me.SendPropertyChanged("CREATED_BY")
				Me.OnCREATED_BYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATED_Date", DbType:="DateTime")>  _
	Public Property CREATED_Date() As System.Nullable(Of Date)
		Get
			Return Me._CREATED_Date
		End Get
		Set
			If (Me._CREATED_Date.Equals(value) = false) Then
				Me.OnCREATED_DateChanging(value)
				Me.SendPropertyChanging
				Me._CREATED_Date = value
				Me.SendPropertyChanged("CREATED_Date")
				Me.OnCREATED_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_UPD_BY", DbType:="NVarChar(80)")>  _
	Public Property LAST_UPD_BY() As String
		Get
			Return Me._LAST_UPD_BY
		End Get
		Set
			If (String.Equals(Me._LAST_UPD_BY, value) = false) Then
				Me.OnLAST_UPD_BYChanging(value)
				Me.SendPropertyChanging
				Me._LAST_UPD_BY = value
				Me.SendPropertyChanged("LAST_UPD_BY")
				Me.OnLAST_UPD_BYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_UPD_DATE", DbType:="DateTime")>  _
	Public Property LAST_UPD_DATE() As System.Nullable(Of Date)
		Get
			Return Me._LAST_UPD_DATE
		End Get
		Set
			If (Me._LAST_UPD_DATE.Equals(value) = false) Then
				Me.OnLAST_UPD_DATEChanging(value)
				Me.SendPropertyChanging
				Me._LAST_UPD_DATE = value
				Me.SendPropertyChanged("LAST_UPD_DATE")
				Me.OnLAST_UPD_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobTitle", DbType:="NVarChar(200)")>  _
	Public Property JobTitle() As String
		Get
			Return Me._JobTitle
		End Get
		Set
			If (String.Equals(Me._JobTitle, value) = false) Then
				Me.OnJobTitleChanging(value)
				Me.SendPropertyChanging
				Me._JobTitle = value
				Me.SendPropertyChanged("JobTitle")
				Me.OnJobTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(200)")>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PD_Group", DbType:="NVarChar(20)")>  _
	Public Property PD_Group() As String
		Get
			Return Me._PD_Group
		End Get
		Set
			If (String.Equals(Me._PD_Group, value) = false) Then
				Me.OnPD_GroupChanging(value)
				Me.SendPropertyChanging
				Me._PD_Group = value
				Me.SendPropertyChanged("PD_Group")
				Me.OnPD_GroupChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChampionClub_Prize")>  _
Partial Public Class ChampionClub_Prize
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _NAME As String
	
	Private _PicUrl As String
	
	Private _Description As String
	
	Private _Points As System.Nullable(Of Integer)
	
	Private _ORG As String
	
	Private _Prize_Level As System.Nullable(Of Integer)
	
	Private _Prize_Level_Name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnNAMEChanged()
    End Sub
    Partial Private Sub OnPicUrlChanging(value As String)
    End Sub
    Partial Private Sub OnPicUrlChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPointsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPointsChanged()
    End Sub
    Partial Private Sub OnORGChanging(value As String)
    End Sub
    Partial Private Sub OnORGChanged()
    End Sub
    Partial Private Sub OnPrize_LevelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPrize_LevelChanged()
    End Sub
    Partial Private Sub OnPrize_Level_NameChanging(value As String)
    End Sub
    Partial Private Sub OnPrize_Level_NameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NAME", DbType:="NVarChar(100)")>  _
	Public Property NAME() As String
		Get
			Return Me._NAME
		End Get
		Set
			If (String.Equals(Me._NAME, value) = false) Then
				Me.OnNAMEChanging(value)
				Me.SendPropertyChanging
				Me._NAME = value
				Me.SendPropertyChanged("NAME")
				Me.OnNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PicUrl", DbType:="NVarChar(100)")>  _
	Public Property PicUrl() As String
		Get
			Return Me._PicUrl
		End Get
		Set
			If (String.Equals(Me._PicUrl, value) = false) Then
				Me.OnPicUrlChanging(value)
				Me.SendPropertyChanging
				Me._PicUrl = value
				Me.SendPropertyChanged("PicUrl")
				Me.OnPicUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(500)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Points", DbType:="Int")>  _
	Public Property Points() As System.Nullable(Of Integer)
		Get
			Return Me._Points
		End Get
		Set
			If (Me._Points.Equals(value) = false) Then
				Me.OnPointsChanging(value)
				Me.SendPropertyChanging
				Me._Points = value
				Me.SendPropertyChanged("Points")
				Me.OnPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORG", DbType:="NVarChar(10)")>  _
	Public Property ORG() As String
		Get
			Return Me._ORG
		End Get
		Set
			If (String.Equals(Me._ORG, value) = false) Then
				Me.OnORGChanging(value)
				Me.SendPropertyChanging
				Me._ORG = value
				Me.SendPropertyChanged("ORG")
				Me.OnORGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Prize_Level", DbType:="Int")>  _
	Public Property Prize_Level() As System.Nullable(Of Integer)
		Get
			Return Me._Prize_Level
		End Get
		Set
			If (Me._Prize_Level.Equals(value) = false) Then
				Me.OnPrize_LevelChanging(value)
				Me.SendPropertyChanging
				Me._Prize_Level = value
				Me.SendPropertyChanged("Prize_Level")
				Me.OnPrize_LevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Prize_Level_Name", DbType:="NVarChar(50)")>  _
	Public Property Prize_Level_Name() As String
		Get
			Return Me._Prize_Level_Name
		End Get
		Set
			If (String.Equals(Me._Prize_Level_Name, value) = false) Then
				Me.OnPrize_Level_NameChanging(value)
				Me.SendPropertyChanging
				Me._Prize_Level_Name = value
				Me.SendPropertyChanged("Prize_Level_Name")
				Me.OnPrize_Level_NameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChampionClub_SendMail_History")>  _
Partial Public Class ChampionClub_SendMail_History
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _MailFrom As String
	
	Private _MailTO As String
	
	Private _MailCC As String
	
	Private _MailBCC As String
	
	Private _Subject As String
	
	Private _Body As String
	
	Private _Sender As String
	
	Private _SendTime As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMailFromChanging(value As String)
    End Sub
    Partial Private Sub OnMailFromChanged()
    End Sub
    Partial Private Sub OnMailTOChanging(value As String)
    End Sub
    Partial Private Sub OnMailTOChanged()
    End Sub
    Partial Private Sub OnMailCCChanging(value As String)
    End Sub
    Partial Private Sub OnMailCCChanged()
    End Sub
    Partial Private Sub OnMailBCCChanging(value As String)
    End Sub
    Partial Private Sub OnMailBCCChanged()
    End Sub
    Partial Private Sub OnSubjectChanging(value As String)
    End Sub
    Partial Private Sub OnSubjectChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnSenderChanging(value As String)
    End Sub
    Partial Private Sub OnSenderChanged()
    End Sub
    Partial Private Sub OnSendTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSendTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MailFrom", DbType:="NVarChar(50)")>  _
	Public Property MailFrom() As String
		Get
			Return Me._MailFrom
		End Get
		Set
			If (String.Equals(Me._MailFrom, value) = false) Then
				Me.OnMailFromChanging(value)
				Me.SendPropertyChanging
				Me._MailFrom = value
				Me.SendPropertyChanged("MailFrom")
				Me.OnMailFromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MailTO", DbType:="NVarChar(50)")>  _
	Public Property MailTO() As String
		Get
			Return Me._MailTO
		End Get
		Set
			If (String.Equals(Me._MailTO, value) = false) Then
				Me.OnMailTOChanging(value)
				Me.SendPropertyChanging
				Me._MailTO = value
				Me.SendPropertyChanged("MailTO")
				Me.OnMailTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MailCC", DbType:="NVarChar(300)")>  _
	Public Property MailCC() As String
		Get
			Return Me._MailCC
		End Get
		Set
			If (String.Equals(Me._MailCC, value) = false) Then
				Me.OnMailCCChanging(value)
				Me.SendPropertyChanging
				Me._MailCC = value
				Me.SendPropertyChanged("MailCC")
				Me.OnMailCCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MailBCC", DbType:="NVarChar(100)")>  _
	Public Property MailBCC() As String
		Get
			Return Me._MailBCC
		End Get
		Set
			If (String.Equals(Me._MailBCC, value) = false) Then
				Me.OnMailBCCChanging(value)
				Me.SendPropertyChanging
				Me._MailBCC = value
				Me.SendPropertyChanged("MailBCC")
				Me.OnMailBCCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject", DbType:="NVarChar(300)")>  _
	Public Property Subject() As String
		Get
			Return Me._Subject
		End Get
		Set
			If (String.Equals(Me._Subject, value) = false) Then
				Me.OnSubjectChanging(value)
				Me.SendPropertyChanging
				Me._Subject = value
				Me.SendPropertyChanged("Subject")
				Me.OnSubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(MAX)")>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sender", DbType:="NVarChar(50)")>  _
	Public Property Sender() As String
		Get
			Return Me._Sender
		End Get
		Set
			If (String.Equals(Me._Sender, value) = false) Then
				Me.OnSenderChanging(value)
				Me.SendPropertyChanging
				Me._Sender = value
				Me.SendPropertyChanged("Sender")
				Me.OnSenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendTime", DbType:="DateTime")>  _
	Public Property SendTime() As System.Nullable(Of Date)
		Get
			Return Me._SendTime
		End Get
		Set
			If (Me._SendTime.Equals(value) = false) Then
				Me.OnSendTimeChanging(value)
				Me.SendPropertyChanging
				Me._SendTime = value
				Me.SendPropertyChanged("SendTime")
				Me.OnSendTimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChampionClub_Reddem")>  _
Partial Public Class ChampionClub_Reddem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ReddemID As String
	
	Private _PrizeID As System.Nullable(Of Integer)
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _MarcomContent As String
	
	Private _CreateBy As String
	
	Private _CreateTime As System.Nullable(Of Date)
	
	Private _UpdateBy As String
	
	Private _UpdateTime As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReddemIDChanging(value As String)
    End Sub
    Partial Private Sub OnReddemIDChanged()
    End Sub
    Partial Private Sub OnPrizeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPrizeIDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnMarcomContentChanging(value As String)
    End Sub
    Partial Private Sub OnMarcomContentChanged()
    End Sub
    Partial Private Sub OnCreateByChanging(value As String)
    End Sub
    Partial Private Sub OnCreateByChanged()
    End Sub
    Partial Private Sub OnCreateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateTimeChanged()
    End Sub
    Partial Private Sub OnUpdateByChanging(value As String)
    End Sub
    Partial Private Sub OnUpdateByChanged()
    End Sub
    Partial Private Sub OnUpdateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdateTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReddemID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ReddemID() As String
		Get
			Return Me._ReddemID
		End Get
		Set
			If (String.Equals(Me._ReddemID, value) = false) Then
				Me.OnReddemIDChanging(value)
				Me.SendPropertyChanging
				Me._ReddemID = value
				Me.SendPropertyChanged("ReddemID")
				Me.OnReddemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrizeID", DbType:="Int")>  _
	Public Property PrizeID() As System.Nullable(Of Integer)
		Get
			Return Me._PrizeID
		End Get
		Set
			If (Me._PrizeID.Equals(value) = false) Then
				Me.OnPrizeIDChanging(value)
				Me.SendPropertyChanging
				Me._PrizeID = value
				Me.SendPropertyChanged("PrizeID")
				Me.OnPrizeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarcomContent", DbType:="NVarChar(500)")>  _
	Public Property MarcomContent() As String
		Get
			Return Me._MarcomContent
		End Get
		Set
			If (String.Equals(Me._MarcomContent, value) = false) Then
				Me.OnMarcomContentChanging(value)
				Me.SendPropertyChanging
				Me._MarcomContent = value
				Me.SendPropertyChanged("MarcomContent")
				Me.OnMarcomContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateBy", DbType:="NVarChar(80)")>  _
	Public Property CreateBy() As String
		Get
			Return Me._CreateBy
		End Get
		Set
			If (String.Equals(Me._CreateBy, value) = false) Then
				Me.OnCreateByChanging(value)
				Me.SendPropertyChanging
				Me._CreateBy = value
				Me.SendPropertyChanged("CreateBy")
				Me.OnCreateByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateTime", DbType:="DateTime")>  _
	Public Property CreateTime() As System.Nullable(Of Date)
		Get
			Return Me._CreateTime
		End Get
		Set
			If (Me._CreateTime.Equals(value) = false) Then
				Me.OnCreateTimeChanging(value)
				Me.SendPropertyChanging
				Me._CreateTime = value
				Me.SendPropertyChanged("CreateTime")
				Me.OnCreateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdateBy", DbType:="NVarChar(80)")>  _
	Public Property UpdateBy() As String
		Get
			Return Me._UpdateBy
		End Get
		Set
			If (String.Equals(Me._UpdateBy, value) = false) Then
				Me.OnUpdateByChanging(value)
				Me.SendPropertyChanging
				Me._UpdateBy = value
				Me.SendPropertyChanged("UpdateBy")
				Me.OnUpdateByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdateTime", DbType:="DateTime")>  _
	Public Property UpdateTime() As System.Nullable(Of Date)
		Get
			Return Me._UpdateTime
		End Get
		Set
			If (Me._UpdateTime.Equals(value) = false) Then
				Me.OnUpdateTimeChanging(value)
				Me.SendPropertyChanging
				Me._UpdateTime = value
				Me.SendPropertyChanged("UpdateTime")
				Me.OnUpdateTimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChampionClub_Admin")>  _
Partial Public Class ChampionClub_Admin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rowID As Integer
	
	Private _userID As String
	
	Private _year As System.Nullable(Of Integer)
	
	Private _ORG As String
	
	Private _CREATED_BY As String
	
	Private _CREATED_DATE As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnrowIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnrowIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnyearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnyearChanged()
    End Sub
    Partial Private Sub OnORGChanging(value As String)
    End Sub
    Partial Private Sub OnORGChanged()
    End Sub
    Partial Private Sub OnCREATED_BYChanging(value As String)
    End Sub
    Partial Private Sub OnCREATED_BYChanged()
    End Sub
    Partial Private Sub OnCREATED_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCREATED_DATEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rowID() As Integer
		Get
			Return Me._rowID
		End Get
		Set
			If ((Me._rowID = value)  _
						= false) Then
				Me.OnrowIDChanging(value)
				Me.SendPropertyChanging
				Me._rowID = value
				Me.SendPropertyChanged("rowID")
				Me.OnrowIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(80)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_year", DbType:="Int")>  _
	Public Property year() As System.Nullable(Of Integer)
		Get
			Return Me._year
		End Get
		Set
			If (Me._year.Equals(value) = false) Then
				Me.OnyearChanging(value)
				Me.SendPropertyChanging
				Me._year = value
				Me.SendPropertyChanged("year")
				Me.OnyearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORG", DbType:="VarChar(10)")>  _
	Public Property ORG() As String
		Get
			Return Me._ORG
		End Get
		Set
			If (String.Equals(Me._ORG, value) = false) Then
				Me.OnORGChanging(value)
				Me.SendPropertyChanging
				Me._ORG = value
				Me.SendPropertyChanged("ORG")
				Me.OnORGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATED_BY", DbType:="VarChar(50)")>  _
	Public Property CREATED_BY() As String
		Get
			Return Me._CREATED_BY
		End Get
		Set
			If (String.Equals(Me._CREATED_BY, value) = false) Then
				Me.OnCREATED_BYChanging(value)
				Me.SendPropertyChanging
				Me._CREATED_BY = value
				Me.SendPropertyChanged("CREATED_BY")
				Me.OnCREATED_BYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATED_DATE", DbType:="DateTime")>  _
	Public Property CREATED_DATE() As System.Nullable(Of Date)
		Get
			Return Me._CREATED_DATE
		End Get
		Set
			If (Me._CREATED_DATE.Equals(value) = false) Then
				Me.OnCREATED_DATEChanging(value)
				Me.SendPropertyChanging
				Me._CREATED_DATE = value
				Me.SendPropertyChanged("CREATED_DATE")
				Me.OnCREATED_DATEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
