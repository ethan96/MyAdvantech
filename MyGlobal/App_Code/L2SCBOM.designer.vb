'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="MyAdvantechGlobal")>  _
Partial Public Class L2SCBOMDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCBOM_EDITOR_LOG(instance As CBOM_EDITOR_LOG)
    End Sub
  Partial Private Sub UpdateCBOM_EDITOR_LOG(instance As CBOM_EDITOR_LOG)
    End Sub
  Partial Private Sub DeleteCBOM_EDITOR_LOG(instance As CBOM_EDITOR_LOG)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("MyAdvantechGlobalConnectionString2").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property CBOM_EDITOR_LOGs() As System.Data.Linq.Table(Of CBOM_EDITOR_LOG)
		Get
			Return Me.GetTable(Of CBOM_EDITOR_LOG)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CBOM_EDITOR_LOG")>  _
Partial Public Class CBOM_EDITOR_LOG
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _uid As String
	
	Private _userid As String
	
	Private _timestamp As System.Nullable(Of Date)
	
	Private _btoid As String
	
	Private _otype As String
	
	Private _sqlstr As String
	
	Private _tagsign As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnuidChanging(value As String)
    End Sub
    Partial Private Sub OnuidChanged()
    End Sub
    Partial Private Sub OnuseridChanging(value As String)
    End Sub
    Partial Private Sub OnuseridChanged()
    End Sub
    Partial Private Sub OntimestampChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntimestampChanged()
    End Sub
    Partial Private Sub OnbtoidChanging(value As String)
    End Sub
    Partial Private Sub OnbtoidChanged()
    End Sub
    Partial Private Sub OnotypeChanging(value As String)
    End Sub
    Partial Private Sub OnotypeChanged()
    End Sub
    Partial Private Sub OnsqlstrChanging(value As String)
    End Sub
    Partial Private Sub OnsqlstrChanged()
    End Sub
    Partial Private Sub OntagsignChanging(value As String)
    End Sub
    Partial Private Sub OntagsignChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uid", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property uid() As String
		Get
			Return Me._uid
		End Get
		Set
			If (String.Equals(Me._uid, value) = false) Then
				Me.OnuidChanging(value)
				Me.SendPropertyChanging
				Me._uid = value
				Me.SendPropertyChanged("uid")
				Me.OnuidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userid", DbType:="VarChar(50)")>  _
	Public Property userid() As String
		Get
			Return Me._userid
		End Get
		Set
			If (String.Equals(Me._userid, value) = false) Then
				Me.OnuseridChanging(value)
				Me.SendPropertyChanging
				Me._userid = value
				Me.SendPropertyChanged("userid")
				Me.OnuseridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timestamp", DbType:="DateTime")>  _
	Public Property timestamp() As System.Nullable(Of Date)
		Get
			Return Me._timestamp
		End Get
		Set
			If (Me._timestamp.Equals(value) = false) Then
				Me.OntimestampChanging(value)
				Me.SendPropertyChanging
				Me._timestamp = value
				Me.SendPropertyChanged("timestamp")
				Me.OntimestampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_btoid", DbType:="VarChar(80)")>  _
	Public Property btoid() As String
		Get
			Return Me._btoid
		End Get
		Set
			If (String.Equals(Me._btoid, value) = false) Then
				Me.OnbtoidChanging(value)
				Me.SendPropertyChanging
				Me._btoid = value
				Me.SendPropertyChanged("btoid")
				Me.OnbtoidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_otype", DbType:="VarChar(20)")>  _
	Public Property otype() As String
		Get
			Return Me._otype
		End Get
		Set
			If (String.Equals(Me._otype, value) = false) Then
				Me.OnotypeChanging(value)
				Me.SendPropertyChanging
				Me._otype = value
				Me.SendPropertyChanged("otype")
				Me.OnotypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sqlstr", DbType:="VarChar(4000)")>  _
	Public Property sqlstr() As String
		Get
			Return Me._sqlstr
		End Get
		Set
			If (String.Equals(Me._sqlstr, value) = false) Then
				Me.OnsqlstrChanging(value)
				Me.SendPropertyChanging
				Me._sqlstr = value
				Me.SendPropertyChanged("sqlstr")
				Me.OnsqlstrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tagsign", DbType:="VarChar(200)")>  _
	Public Property tagsign() As String
		Get
			Return Me._tagsign
		End Get
		Set
			If (String.Equals(Me._tagsign, value) = false) Then
				Me.OntagsignChanging(value)
				Me.SendPropertyChanging
				Me._tagsign = value
				Me.SendPropertyChanged("tagsign")
				Me.OntagsignChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
