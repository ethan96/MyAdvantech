'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="MyAdvantechGlobal")>  _
Partial Public Class CHANNELTRAININGDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCHANNEL_TRAINING(instance As CHANNEL_TRAINING)
    End Sub
  Partial Private Sub UpdateCHANNEL_TRAINING(instance As CHANNEL_TRAINING)
    End Sub
  Partial Private Sub DeleteCHANNEL_TRAINING(instance As CHANNEL_TRAINING)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("MyAdvantechGlobalConnectionString2").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property CHANNEL_TRAININGs() As System.Data.Linq.Table(Of CHANNEL_TRAINING)
		Get
			Return Me.GetTable(Of CHANNEL_TRAINING)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CHANNEL_TRAINING")>  _
Partial Public Class CHANNEL_TRAINING
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UID As String
	
	Private _NAME As String
	
	Private _URL As String
	
	Private _CDATE As System.Nullable(Of Date)
	
	Private _CBY As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUIDChanging(value As String)
    End Sub
    Partial Private Sub OnUIDChanged()
    End Sub
    Partial Private Sub OnNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnNAMEChanged()
    End Sub
    Partial Private Sub OnURLChanging(value As String)
    End Sub
    Partial Private Sub OnURLChanged()
    End Sub
    Partial Private Sub OnCDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCDATEChanged()
    End Sub
    Partial Private Sub OnCBYChanging(value As String)
    End Sub
    Partial Private Sub OnCBYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UID", DbType:="VarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UID() As String
		Get
			Return Me._UID
		End Get
		Set
			If (String.Equals(Me._UID, value) = false) Then
				Me.OnUIDChanging(value)
				Me.SendPropertyChanging
				Me._UID = value
				Me.SendPropertyChanged("UID")
				Me.OnUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NAME", DbType:="NVarChar(500)")>  _
	Public Property NAME() As String
		Get
			Return Me._NAME
		End Get
		Set
			If (String.Equals(Me._NAME, value) = false) Then
				Me.OnNAMEChanging(value)
				Me.SendPropertyChanging
				Me._NAME = value
				Me.SendPropertyChanged("NAME")
				Me.OnNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URL", DbType:="NVarChar(500)")>  _
	Public Property URL() As String
		Get
			Return Me._URL
		End Get
		Set
			If (String.Equals(Me._URL, value) = false) Then
				Me.OnURLChanging(value)
				Me.SendPropertyChanging
				Me._URL = value
				Me.SendPropertyChanged("URL")
				Me.OnURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="CDATE", Storage:="_CDATE", DbType:="DateTime")>  _
	Public Property [CDATE]() As System.Nullable(Of Date)
		Get
			Return Me._CDATE
		End Get
		Set
			If (Me._CDATE.Equals(value) = false) Then
				Me.OnCDATEChanging(value)
				Me.SendPropertyChanging
				Me._CDATE = value
				Me.SendPropertyChanged("[CDATE]")
				Me.OnCDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CBY", DbType:="VarChar(100)")>  _
	Public Property CBY() As String
		Get
			Return Me._CBY
		End Get
		Set
			If (String.Equals(Me._CBY, value) = false) Then
				Me.OnCBYChanging(value)
				Me.SendPropertyChanging
				Me._CBY = value
				Me.SendPropertyChanged("CBY")
				Me.OnCBYChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
