<%@ Page Title="" Language="VB" MasterPageFile="~/Includes/MyMaster.master" %>

<%@ Import Namespace="SAPDAL.SAPDAL" %>
<script runat="server">
    
    Public Class PNInfo
        Public Property id As String : Public Property name As String
        Public Sub New(ByVal k As String, ByVal v As String)
            Me.id = k : Me.name = v
        End Sub
    End Class
    
    Protected Sub Page_Load(sender As Object, e As EventArgs)
        If Request("q") IsNot Nothing Then
            Dim txtKey As String = Trim(Request("q")), pnList As New List(Of PNInfo)
            Dim dt As DataTable = dbUtil.dbGetDataTable("MY", _
                                    " select top 10 PART_NO from SAP_PRODUCT_ORG with (nolock) where ORG_ID='" + Session("org_id") + "' " + _
                                    " and [status] in ('A','N','H','O') and PART_NO like '" + Replace(Replace(txtKey, "'", "''"), "*", "%") + "%' order by PART_NO")
                                
            For Each r As DataRow In dt.Rows
                pnList.Add(New PNInfo(r.Item("part_no"), r.Item("part_no")))
            Next
           
            Dim jsr As New Script.Serialization.JavaScriptSerializer, retJson As String = jsr.Serialize(pnList)
            If Request("callback") IsNot Nothing Then
                retJson = Request("callback") + "(" + retJson + ")"
            End If
            Response.Clear() : Response.Write(retJson) : Response.End()
        End If
    End Sub
        
    Public Shared Function GetProductDiscountByEPricerPriceGrade(PriceGrade As String, PricingRBU As String, PricingCurrency As String, _
                                                                 SalesOrg As String, Products As List(Of ProductPrice)) As Boolean
        
        Dim epPriceCache As List(Of ePricerPriceCache) = Nothing
        Try
            epPriceCache = HttpContext.Current.Cache("ePricer Price Cache")
        Catch ex As InvalidCastException
            HttpContext.Current.Cache.Remove("ePricer Price Cache") : epPriceCache = Nothing
        End Try
        If epPriceCache Is Nothing Then
            epPriceCache = New List(Of ePricerPriceCache)
            HttpContext.Current.Cache.Add("ePricer Price Cache", epPriceCache, Nothing, Now.AddHours(12), _
                                     System.Web.Caching.Cache.NoSlidingExpiration, CacheItemPriority.Default, Nothing)
        End If
        
        '20150209TC: Get the current pricing year & quarter from ePricer's definition table
        Dim ePriceConn As New SqlClient.SqlConnection(ConfigurationManager.ConnectionStrings("EPRICER").ConnectionString)
        Dim YQApt As New SqlClient.SqlDataAdapter("select pricec_curr_year, pricec_curr_quarter from Price_Control where org=@RBU and getdate() between pricec_start_date and pricec_end_date ", ePriceConn)
        YQApt.SelectCommand.Parameters.AddWithValue("RBU", PricingRBU)
        Dim YQDt As New DataTable, CurPriceYear As Integer = -1, CurPriceQuarter As Integer = -1
        YQApt.Fill(YQDt)
        If YQDt.Rows.Count > 0 Then
            CurPriceYear = YQDt.Rows(0).Item("pricec_curr_year") : CurPriceQuarter = YQDt.Rows(0).Item("pricec_curr_quarter")
        Else
            Return False
        End If
        
        For Each p In Products
            
            Dim tmpCache = From q In epPriceCache Where q.PartNo = p.PartNo And q.PriceGrade = PriceGrade _
                           And q.PricingCurrency = PricingCurrency And q.PricingRBU = PricingRBU And q.SalesOrg = SalesOrg
            '20150209TC: If item + pricegrade already exists in cache then get it from cache
            If tmpCache.Count > 0 Then
                p.ListPrice = tmpCache(0).ListPrice : p.DiscountPrice = tmpCache(0).DiscountPrice : p.Cost = tmpCache(0).Cost
            Else
                If ePriceConn.State <> ConnectionState.Open Then ePriceConn.Open()
                Dim tmpMaterialPricingGrp As String = "", tmpProductLine As String = ""
                '20150209TC: If item is a p-trade, get the markup rate from PriceGrade_Detail, and get ZVP2 cost from SAP, and then use cost to markup
                ' To select markup from PriceGrade_Detail we need to get item's material pricing group and product_line from SAP product tables
                If IsPTD(p.PartNo, SalesOrg, tmpProductLine, tmpMaterialPricingGrp) Then
                    p.IsPTrade = True : p.MaterialPricingGroup = tmpMaterialPricingGrp : p.ProductLine = tmpProductLine
                    Dim sql As String = _
                        " select distinct top 1 a.PROD_LN, a.ITEM_GROUP, cast((a.AMOUNT *0.01)+1 as numeric(18,2)) as MarkupRate, a.YEAR, a.[QUARTER]  " + _
                        " from PriceGrade_Detail a  " + _
                        " where a.ORG=@RBU and a.PROD_LN=@PLINE and a.GRADE_NAME=@PGRADE  " + _
                        " and a.[YEAR]=" + CurPriceYear.ToString() + " and a.[QUARTER]=" + CurPriceQuarter.ToString() + " and a.ITEM_GROUP=@MPGRP and a.PRI_TYPE='% Markup' " + _
                        " order by a.[YEAR] desc, a.[QUARTER] desc "
                
                    Dim apt As New SqlClient.SqlDataAdapter(sql, ePriceConn)
                    With apt.SelectCommand.Parameters
                        .AddWithValue("RBU", PricingRBU) : .AddWithValue("PLINE", tmpProductLine) : .AddWithValue("PGRADE", PriceGrade) : .AddWithValue("MPGRP", tmpMaterialPricingGrp)
                    End With
                    Dim dt As New DataTable
                    apt.Fill(dt)
                    
                    Dim err As String = "", cur As String = ""
                    Dim cost As Double = GetZVP2Cost(SalesOrg, p.PartNo, err, cur)
                    p.Cost = cost
                    If dt.Rows.Count > 0 Then
                        If String.IsNullOrEmpty(err) And cost > 0 Then
                            p.DiscountPrice = cost * dt.Rows(0).Item("MarkupRate") : p.IsPricingOK = True : p.IsPTrade = True
                            Dim ePricerPriceCache1 As New ePricerPriceCache
                            With ePricerPriceCache1
                                .PartNo = p.PartNo : .PriceGrade = PriceGrade : .PricingCurrency = PricingCurrency : .PricingRBU = PricingRBU : .SalesOrg = SalesOrg
                                .ListPrice = -1 : .DiscountPrice = p.DiscountPrice : .Cost = p.Cost
                            End With
                            epPriceCache.Add(ePricerPriceCache1)
                        Else
                            p.Cost = -1 : p.DiscountPrice = -1
                        End If
                    End If
                Else
                    '20150209 TC: if it's a standard item, get discount price from table "Price"
                    p.IsPTrade = False
                
                    Dim sql As String = _
                       " select distinct top 1 a.PROD_NAME, a.LIST_PRICE, a.DISCOUNT1, a.AMT1, a.YEAR, a.[QUARTER]  " + _
                       " from Price a " + _
                       " where a.ORG=@RBU and a.GRADE_NAME=@PGRADE and a.CURCY_CD='NTD' " + _
                       " and a.[YEAR]=" + CurPriceYear.ToString() + " and a.[QUARTER]=" + CurPriceQuarter.ToString() + " and a.PROD_NAME=@PN " + _
                       " order by a.YEAR desc, a.[QUARTER] desc "
                
                    Dim apt As New SqlClient.SqlDataAdapter(sql, ePriceConn)
                    With apt.SelectCommand.Parameters
                        .AddWithValue("RBU", PricingRBU) : .AddWithValue("PN", p.PartNo) : .AddWithValue("PGRADE", PriceGrade)
                    End With
                    Dim dt As New DataTable
                    apt.Fill(dt)
                    If dt.Rows.Count > 0 Then
                        p.DiscountPrice = dt.Rows(0).Item("AMT1") : p.ListPrice = dt.Rows(0).Item("LIST_PRICE") : p.IsPricingOK = True
                        Dim ePricerPriceCache1 As New ePricerPriceCache
                        With ePricerPriceCache1
                            .PartNo = p.PartNo : .PriceGrade = PriceGrade : .PricingCurrency = PricingCurrency : .PricingRBU = PricingRBU : .SalesOrg = SalesOrg
                            .ListPrice = p.ListPrice : .DiscountPrice = p.DiscountPrice : .Cost = -1
                        End With
                        epPriceCache.Add(ePricerPriceCache1)
                        
                    Else
                        p.DiscountPrice = -1
                    End If
                
                End If
            End If
            
          
        Next
        ePriceConn.Close()
        
        Return True
    End Function
    
    <Serializable()> _
    Public Class ePricerPriceCache
        Public Property PartNo As String : Public Property PriceGrade As String : Public Property PricingRBU As String
        Public Property PricingCurrency As String : Public Property SalesOrg As String
        Public Property ListPrice As Double : Public Property DiscountPrice As Double : Public Property Cost As Double
    End Class
    
    <Serializable()> _
    Public Class ProductPrice
        Public Property PartNo As String : Property Qty As Integer : Public Property DiscountPrice As Double
        Public Property ListPrice As Double : Public Property Cost As Double : Public Property IsPricingOK As Boolean
        Public Property IsPTrade As Boolean : Public MaterialPricingGroup As String : Public Property ProductLine As String
        Public Sub New()
            IsPricingOK = False : IsPTrade = False
        End Sub
        Public Sub New(PartNo As String)
            Me.PartNo = PartNo : Me.Qty = 1
        End Sub
    End Class
    
    <Serializable()> _
    Public Class IsPtradeRec
        Public Property PartNo As String : Public Property ProductLine As String : Public Property IsPTrade As Boolean
        Public Property MaterialPricingGrp As String : Public Property SalesOrg As String
        Public Sub New(PartNo As String, ProductLine As String, IsPTrade As Boolean, MaterialPricingGrp As String, SalesOrg As String)
            Me.PartNo = PartNo : Me.ProductLine = ProductLine : Me.IsPTrade = IsPTrade : Me.MaterialPricingGrp = MaterialPricingGrp : Me.SalesOrg = SalesOrg
        End Sub
    End Class
    
    ''' <summary>
    ''' Pass part no. and SAP sales org (ex: TW01), and returns true if it's a p-trade
    ''' And when it's p-trade, its product line and sales org's corresponding material pricing group are also returned
    ''' If it's not p-trade, function will only return false.    
    ''' </summary>
    ''' <param name="PartNo"></param>
    ''' <param name="SalesOrg"></param>
    ''' <param name="ProductLine"></param>
    ''' <param name="MaterialPricingGrp"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function IsPTD(PartNo As String, SalesOrg As String, ByRef ProductLine As String, ByRef MaterialPricingGrp As String) As Boolean
        PartNo = Trim(PartNo).ToLower()
        Dim ListPTD As List(Of IsPtradeRec) = Nothing
        Try
            ListPTD = HttpContext.Current.Cache("Is PTrade List")
        Catch ex As InvalidCastException
            HttpContext.Current.Cache.Remove("Is PTrade List") : ListPTD = Nothing
        End Try
       
        If ListPTD Is Nothing Then
            ListPTD = New List(Of IsPtradeRec)
            HttpContext.Current.Cache.Add("Is PTrade List", ListPTD, Nothing, Now.AddHours(12), _
                                        System.Web.Caching.Cache.NoSlidingExpiration, CacheItemPriority.Default, Nothing)
        End If
        
        Dim r = From q In ListPTD Where String.Equals(q.PartNo, PartNo, StringComparison.CurrentCultureIgnoreCase) And _
                String.Equals(q.SalesOrg, SalesOrg, StringComparison.CurrentCultureIgnoreCase)
        
        If r.Count = 0 Then
            Dim f As Boolean = False
            Dim STR As String = _
                " select distinct a.PRODUCT_TYPE, a.PRODUCT_LINE, IsNull(b.MATERIAL_PRICING_GRP,'') as MATERIAL_PRICING_GRP " + _
                " from SAP_PRODUCT a inner join SAP_PRODUCT_STATUS b on a.PART_NO=b.PART_NO  " + _
                " where b.SALES_ORG=@ORG and " + _
                " ( " + _
                " 	(PRODUCT_TYPE = 'ZPER') OR  " + _
                " 	( " + _
                " 		(PRODUCT_TYPE = 'ZFIN' OR PRODUCT_TYPE = 'ZOEM') AND  " + _
                " 		( " + _
                " 			a.PART_NO LIKE 'BT%' OR a.PART_NO LIKE 'DSD%' OR a.PART_NO LIKE 'ES%' OR a.PART_NO LIKE 'EWM%' OR a.PART_NO LIKE 'GPS%'  " + _
                " 			OR a.PART_NO LIKE 'SQF%' OR a.PART_NO LIKE 'WIFI%' OR a.PART_NO LIKE 'PMM%' OR a.PART_NO LIKE 'Y%' " + _
                " 		) " + _
                " 	) OR  " + _
                " 	( " + _
                " 		(PRODUCT_TYPE = 'ZRAW') AND (a.PART_NO LIKE '206Q%') " + _
                " 	) OR  " + _
                " 	( " + _
                " 		(PRODUCT_TYPE = 'ZSEM') AND (a.PART_NO LIKE '968Q%') " + _
                " 	) " + _
                " )  " + _
                " AND a.PART_NO = @PN "
            Dim apt As New SqlClient.SqlDataAdapter(STR, ConfigurationManager.ConnectionStrings("MY").ConnectionString)
            apt.SelectCommand.Parameters.AddWithValue("ORG", SalesOrg) : apt.SelectCommand.Parameters.AddWithValue("PN", PartNo)
            Dim dt As New DataTable
            apt.Fill(dt)
            apt.SelectCommand.Connection.Close()
            Dim IsPtradeRec1 As IsPtradeRec = Nothing
            If dt.Rows.Count > 0 Then
                IsPtradeRec1 = New IsPtradeRec(PartNo, dt.Rows(0).Item("PRODUCT_LINE"), True, dt.Rows(0).Item("MATERIAL_PRICING_GRP"), SalesOrg)
            Else
                IsPtradeRec1 = New IsPtradeRec(PartNo, "", False, "", SalesOrg)
            End If
            ListPTD.Add(IsPtradeRec1)
        End If
       
        r = From q In ListPTD Where String.Equals(q.PartNo, PartNo, StringComparison.CurrentCultureIgnoreCase) And _
            String.Equals(q.SalesOrg, SalesOrg, StringComparison.CurrentCultureIgnoreCase)
        
        If r.Count > 0 Then
            MaterialPricingGrp = r(0).MaterialPricingGrp : ProductLine = r(0).ProductLine
            Return r(0).IsPTrade
        End If
        Return False
    End Function
    
    <Serializable()> _
    Public Class PTradeZVP2Cost
        Implements IEquatable(Of PTradeZVP2Cost)

        Public Property SalesOrg As String : Public Property PartNo As String : Public Property Currency As String
        Public Property ZVP2Cost As Double : Public Property HasPriceFlag As Boolean
        Public Sub New(SalesOrg As String, PartNo As String, Currency As String, ZVP2Cost As String, HasPriceFlag As Boolean)
            Me.SalesOrg = SalesOrg : Me.PartNo = PartNo : Me.Currency = Currency : Me.ZVP2Cost = ZVP2Cost : Me.HasPriceFlag = HasPriceFlag
        End Sub

        Public Function Equals1(other As PTradeZVP2Cost) As Boolean Implements System.IEquatable(Of PTradeZVP2Cost).Equals
            If Me.SalesOrg = other.SalesOrg And Me.PartNo = other.PartNo Then
                Return True
            Else
                Return False
            End If
        End Function
    End Class
    
    ''' <summary>
    ''' Get item's price condition ZVP2. This value will be multiplied by ePricer's markup rate to get the final price based on ATW AOnline sales input's price grade.
    ''' If ZVP2 is not available, this function will return -1.    
    ''' </summary>
    ''' <param name="SalesOrg"></param>
    ''' <param name="PartNo"></param>
    ''' <param name="ErrorMessage"></param>
    ''' <param name="Currency"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function GetZVP2Cost(ByVal SalesOrg As String, ByVal PartNo As String, ByRef ErrorMessage As String, ByRef Currency As String) As Double
        Currency = "" : ErrorMessage = "" : PartNo = Trim(UCase(PartNo))
        Dim ListPTradeCost As List(Of PTradeZVP2Cost) = Nothing
        Try
            ListPTradeCost = HttpContext.Current.Cache("List PTradeZVP2Cost")
        Catch ex As InvalidCastException
            HttpContext.Current.Cache.Remove("List PTradeZVP2Cost") : ListPTradeCost = Nothing
        End Try
       
        If ListPTradeCost Is Nothing Then
            ListPTradeCost = New List(Of PTradeZVP2Cost)
            HttpContext.Current.Cache.Add("List PTradeZVP2Cost", ListPTradeCost, Nothing, Now.AddHours(12), _
                                          System.Web.Caching.Cache.NoSlidingExpiration, CacheItemPriority.Default, Nothing)
        End If

        Dim PTradeZVP2Cost1 As New PTradeZVP2Cost(SalesOrg, PartNo, "", -1, False)
        If Not ListPTradeCost.Contains(PTradeZVP2Cost1) Then

            Dim proxy1 As New BAPI_SALESORDER_SIMULATE.BAPI_SALESORDER_SIMULATE(ConfigurationManager.AppSettings("SAP_PRD"))

            Try
                Dim ERPId As String = ""

                Select Case Left(SalesOrg, 2).ToUpper()
                    '20140116 TC: Should select ERPID from eQuotation.dbo.ESTORE_PRICING_ERPID instead
                    Case "TW"
                        ERPId = "2NC00001" : SalesOrg = "TW01"
                End Select

                Dim OrderHeader As New BAPI_SALESORDER_SIMULATE.BAPISDHEAD, Partners As New BAPI_SALESORDER_SIMULATE.BAPIPARTNRTable
                Dim ItemsIn As New BAPI_SALESORDER_SIMULATE.BAPIITEMINTable, ItemsOut As New BAPI_SALESORDER_SIMULATE.BAPIITEMEXTable
                Dim Conditions As New BAPI_SALESORDER_SIMULATE.BAPICONDTable

                With OrderHeader
                    .Doc_Type = "ZOR" : .Sales_Org = SalesOrg : .Distr_Chan = "10" : .Division = "00"
                End With

                Dim FakeItem As New BAPI_SALESORDER_SIMULATE.BAPIITEMIN
                FakeItem.Itm_Number = "000001" : FakeItem.Material = GetAHighLevelItemForPricing(SalesOrg) : FakeItem.Req_Qty = 1 : ItemsIn.Add(FakeItem)

                Dim MainItem As New BAPI_SALESORDER_SIMULATE.BAPIITEMIN
                MainItem.Itm_Number = "000002" : MainItem.Material = Global_Inc.Format2SAPItem(PartNo.Trim().ToUpper()) : MainItem.Req_Qty = 1 : MainItem.Hg_Lv_Item = "000001"
                ItemsIn.Add(MainItem)


                Dim SoldTo As New BAPI_SALESORDER_SIMULATE.BAPIPARTNR, ShipTo As New BAPI_SALESORDER_SIMULATE.BAPIPARTNR
                Dim retDt As New BAPI_SALESORDER_SIMULATE.BAPIRET2Table
                SoldTo.Partn_Role = "AG" : SoldTo.Partn_Numb = ERPId : ShipTo.Partn_Role = "WE" : ShipTo.Partn_Numb = ERPId
                Partners.Add(SoldTo) : Partners.Add(ShipTo)
                proxy1.Connection.Open()
                Dim dtItem As New DataTable, dtPartNr As New DataTable, dtcon As New DataTable, DTRET As New DataTable

                dtItem = ItemsIn.ToADODataTable() : dtPartNr = Partners.ToADODataTable() : dtcon = Conditions.ToADODataTable()

                proxy1.Bapi_Salesorder_Simulate("", OrderHeader, New BAPI_SALESORDER_SIMULATE.BAPIPAYER, New BAPI_SALESORDER_SIMULATE.BAPIRETURN, "", _
                                                New BAPI_SALESORDER_SIMULATE.BAPISHIPTO, New BAPI_SALESORDER_SIMULATE.BAPISOLDTO, _
                                                New BAPI_SALESORDER_SIMULATE.BAPIPAREXTable, retDt, _
                                                New BAPI_SALESORDER_SIMULATE.BAPICCARDTable, New BAPI_SALESORDER_SIMULATE.BAPICCARD_EXTable, _
                                                New BAPI_SALESORDER_SIMULATE.BAPICUBLBTable, New BAPI_SALESORDER_SIMULATE.BAPICUINSTable, _
                                                New BAPI_SALESORDER_SIMULATE.BAPICUPRTTable, New BAPI_SALESORDER_SIMULATE.BAPICUCFGTable, _
                                                New BAPI_SALESORDER_SIMULATE.BAPICUVALTable, Conditions, New BAPI_SALESORDER_SIMULATE.BAPIINCOMPTable, _
                                                ItemsIn, ItemsOut, Partners, New BAPI_SALESORDER_SIMULATE.BAPISDHEDUTable, _
                                                New BAPI_SALESORDER_SIMULATE.BAPISCHDLTable, New BAPI_SALESORDER_SIMULATE.BAPIADDR1Table)
                proxy1.Connection.Close()

                For Each retMsgRec As BAPI_SALESORDER_SIMULATE.BAPIRET2 In retDt
                    If retMsgRec.Type = "E" Then
                        ErrorMessage += String.Format("Type:{0};Msg:{1}", retMsgRec.Type, retMsgRec.Message + ";" + retMsgRec.Message_V1 + ";" + retMsgRec.Message_V2) + vbCrLf
                    End If
                Next
                Dim condDt As DataTable = Conditions.ToADODataTable()
                Dim rs() As DataRow = condDt.Select("Cond_Type='ZVP2' and Itm_Number='000002'")
                If rs.Length > 0 Then
                    Currency = rs(0).Item("Currency")
                    PTradeZVP2Cost1.ZVP2Cost = rs(0).Item("Cond_Value") : PTradeZVP2Cost1.Currency = Currency : PTradeZVP2Cost1.HasPriceFlag = True
                Else
                    ErrorMessage += "; Cannot find condition ZVP2"
                    PTradeZVP2Cost1.ZVP2Cost = -1 : PTradeZVP2Cost1.Currency = "" : PTradeZVP2Cost1.HasPriceFlag = False
                End If
                ListPTradeCost.Add(PTradeZVP2Cost1)
            Catch ex As Exception
                If Not IsNothing(proxy1) AndAlso Not IsNothing(proxy1.Connection) Then
                    proxy1.Connection.Close()
                End If
            End Try

            'Return SalesOrgPartNoMinPrice1.MinPrice
        End If

        If ListPTradeCost.Contains(PTradeZVP2Cost1) Then
            Dim CostResult As PTradeZVP2Cost = ListPTradeCost.Find(Function(obj) obj.SalesOrg = SalesOrg And obj.PartNo = PartNo)
            Currency = CostResult.Currency
            Return CostResult.ZVP2Cost
        Else
            Return -1
        End If
    End Function

 
    <Services.WebMethod(enablesession:=True)> _
    <Web.Script.Services.ScriptMethod()> _
    Public Shared Function GetPriceGrades(ByVal prefixText As String, ByVal count As Integer) As String()
        prefixText = UCase(Replace(Trim(prefixText), "'", "''"))
        prefixText = UCase(Replace(Trim(prefixText), "*", "%"))
        Dim PGradeList As List(Of ePricerPriceGrade) = Nothing
        Try
            PGradeList = HttpContext.Current.Cache("ATW Price Grade List")
        Catch ex As InvalidCastException
            HttpContext.Current.Cache.Remove("ATW Price Grade List") : PGradeList = Nothing
        End Try
       
        If PGradeList Is Nothing Then
            PGradeList = New List(Of ePricerPriceGrade)
            Dim dt As DataTable = dbUtil.dbGetDataTable("EPRICER", "select a.GRADE_NAME from Price a where a.ORG='ATW' and a.GRADE_NAME is not null group by a.GRADE_NAME order by a.GRADE_NAME")
            For Each r As DataRow In dt.Rows
                PGradeList.Add(New ePricerPriceGrade(r.Item("GRADE_NAME")))
            Next
            HttpContext.Current.Cache.Add("ATW Price Grade List", PGradeList, Nothing, Now.AddHours(12), _
                                    System.Web.Caching.Cache.NoSlidingExpiration, CacheItemPriority.Default, Nothing)
        End If
        
        Dim plist = From q In PGradeList Where q.PriceGrade.StartsWith(prefixText) Or prefixText.StartsWith(q.PriceGrade) Take 10
                    
        If plist.Count > 0 Then
            Dim str(plist.Count - 1) As String
            For i As Integer = 0 To plist.Count - 1
                str(i) = plist(i).PriceGrade
            Next
            Return str
        End If
        Return Nothing
    End Function
    
    Public Class ePricerPriceGrade
        Public Property PriceGrade As String
        Public Sub New(pg As String)
            Me.PriceGrade = UCase(Trim(pg))
        End Sub
    End Class
    
    Protected Sub btnAddItem_Click(sender As Object, e As System.EventArgs)
        
        UI.ScriptManager.RegisterStartupScript(Me.up1, up1.GetType(), "setupPNAutoSuggestion", "setupPNAutoSuggestion()", True)
        
        If String.IsNullOrEmpty(Trim(txtInputPN.Text)) Then Exit Sub
        Dim Products As List(Of ProductPrice) = ViewState("Quote Items")
        If Products Is Nothing Then
            Products = New List(Of ProductPrice)
            ViewState("Quote Items") = Products
        End If
        
        Dim pns() As String = Split(Trim(txtInputPN.Text), ";")
        For Each pn In pns
            Products.Add(New ProductPrice(Trim(pn)))
        Next
        gvProductPrice.DataSource = Products : gvProductPrice.DataBind()
        txtInputPN.Text = ""
    End Sub

    Protected Sub btnApplyDiscountByGrade_Click(sender As Object, e As System.EventArgs)
        
        If Trim(txtInputPriceGrade.Text).Length <> 8 Then Exit Sub
        
        Dim Products As List(Of ProductPrice) = ViewState("Quote Items")
        If Products IsNot Nothing Then
            Dim Pricegrade As String = Trim(txtInputPriceGrade.Text), PricingRBU As String = "ATW", PricingCurrency As String = "NTD", SalesOrg As String = "TW01"
            GetProductDiscountByEPricerPriceGrade(Pricegrade, PricingRBU, PricingCurrency, SalesOrg, Products)
            gvProductPrice.DataSource = Products : gvProductPrice.DataBind()
        End If
      
    End Sub
    
    <Services.WebMethod()> _
    <Web.Script.Services.ScriptMethod()> _
    Public Shared Function GetOrderHistory(PartNo As String) As String
        Dim OrderRecords As New List(Of OrderHistoryRecord)
        Dim CompanyId As String = HttpContext.Current.Session("company_id")
        CompanyId = "T23092092"
        Dim sb As New System.Text.StringBuilder
        With sb
            .AppendLine(" select top 200 a.CURRENCY, a.LINE_NO, a.ORDER_DATE, a.ORDER_QTY, a.PART_NO, a.SO_NO, a.UNIT_PRICE   ")
            .AppendLine(" from SAP_ORDER_HISTORY_ATW2YEAR a  ")
            .AppendLine(" where a.COMPANY_ID='" + CompanyId + "'  ")
            If Not String.IsNullOrEmpty(PartNo) Then .AppendLine(" and a.part_no like '%" + Replace(Replace(Trim(PartNo), "'", "''"), "*", "%") + "%'  ")
            .AppendLine(" order by a.ORDER_DATE desc ")
        End With
        Dim dt As DataTable = dbUtil.dbGetDataTable("MY", sb.ToString())
        For Each r As DataRow In dt.Rows
            Dim OrderHistoryRecord1 As New OrderHistoryRecord()
            With OrderHistoryRecord1
                .SO_NO = r.Item("SO_NO") : .ORDER_DATE = CDate(r.Item("ORDER_DATE")).ToString("yyyy/MM/dd")
                .LINE_NO = r.Item("LINE_NO") : .PART_NO = r.Item("PART_NO") : .ORDER_QTY = r.Item("ORDER_QTY")
                .UNIT_PRICE = Util.FormatMoney(r.Item("UNIT_PRICE"), r.Item("CURRENCY"))
            End With
            OrderRecords.Add(OrderHistoryRecord1)
        Next
        Dim serializer As New Script.Serialization.JavaScriptSerializer()
        Return serializer.Serialize(OrderRecords)
    End Function
    
    <Serializable()> _
    Public Class OrderHistoryRecord
        Public Property SO_NO As String : Public Property ORDER_DATE As String : Public Property LINE_NO As String : Public Property PART_NO As String
        Public Property ORDER_QTY As Integer : Public Property UNIT_PRICE As String
    End Class
    
</script>
<asp:Content ID="Content1" ContentPlaceHolderID="_main" runat="Server">
    <link rel="stylesheet" href="http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />    
    <script type="text/javascript" src="../EC/jquery-latest.min.js"></script>
    <script type="text/javascript" src="../EC/jquery-ui.js"></script>
    <script type="text/javascript" src="../EC/json2.js"></script>
    <link rel="stylesheet" href="../Includes/js/token-input-facebook.css" type="text/css" />
    <script type="text/javascript" src="jquery.tokeninput_eQuote.js"></script>
    <style type="text/css">
        ul.token-input-list-facebook {
            overflow: hidden; 
            height: auto !important; 
            height: 1%;
            border: 1px solid #8496ba;
            cursor: text;
            font-size: 12px;
            font-family: Verdana;
            min-height: 1px;
            z-index: 999;
            margin: 0;
            padding: 0;
            background-color: #fff;
            list-style-type: none;
            clear: left;
            width: 500px;
        }

        ul.token-input-list-facebook li input {
            border: 0;
            padding: 3px 8px;
            background-color: white;
            margin: 2px 0;
            -webkit-appearance: caret;
            width: 240px;
        }
    </style>
    <table width="100%">
        <tr>
            <td>
                <asp:Panel runat="server" ID="PanelAddItem" DefaultButton="btnAddItem">
                    <table>
                        <tr>
                            <th>
                                Part No.
                            </th>
                            <td>
                                <asp:UpdatePanel runat="server" ID="up2" UpdateMode="Conditional">
                                    <ContentTemplate>                                       
                                        <asp:TextBox runat="server" ID="txtInputPN" Width="140px" />
                                    </ContentTemplate>
                                    <Triggers>
                                        <asp:AsyncPostBackTrigger ControlID="btnAddItem" EventName="Click" />
                                    </Triggers>
                                </asp:UpdatePanel>
                            </td>
                            <td>
                                <asp:Button runat="server" ID="btnAddItem" Text="Add" OnClick="btnAddItem_Click" />
                            </td>
                        </tr>
                    </table>
                </asp:Panel>
            </td>
            <td>
                <asp:Panel runat="server" ID="PanelEPricerGradeDiscount" DefaultButton="btnApplyDiscountByGrade">
                    <table>
                        <tr>
                            <th>
                                Price Grade:
                            </th>
                            <td>
                                <ajaxToolkit:AutoCompleteExtender runat="server" ID="autoComp1" TargetControlID="txtInputPriceGrade"
                                    ServiceMethod="GetPriceGrades" MinimumPrefixLength="0" />
                                <asp:TextBox runat="server" ID="txtInputPriceGrade" />
                            </td>
                            <td>
                                <asp:Button runat="server" ID="btnApplyDiscountByGrade" Text="Apply" OnClick="btnApplyDiscountByGrade_Click" />
                            </td>
                        </tr>
                    </table>
                </asp:Panel>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <asp:UpdatePanel runat="server" ID="up1" UpdateMode="Conditional">
                    <ContentTemplate>
                        <asp:GridView runat="server" ID="gvProductPrice" Width="100%">
                            <Columns>
                                <asp:TemplateField>
                                    <ItemTemplate>
                                        <input id='LinePn' type="hidden" value='<%#Eval("PartNo") %>' />
                                        <a href="javascript:void(0);" onclick="ShowPricingHistory(this)">Pricing History</a>
                                    </ItemTemplate>
                                </asp:TemplateField>
                            </Columns>
                        </asp:GridView>
                    </ContentTemplate>
                    <Triggers>
                        <asp:AsyncPostBackTrigger ControlID="btnAddItem" EventName="Click" />
                        <asp:AsyncPostBackTrigger ControlID="btnApplyDiscountByGrade" EventName="Click" />
                    </Triggers>
                </asp:UpdatePanel>
                <script type="text/javascript">

                    $(document).ready(
                        function () {
                            setupPNAutoSuggestion();
                        }
                    );

                    function ClickAddItemBtn() {
                        $("#<%=btnAddItem.ClientId%>").click();
                    }

                    function setupPNAutoSuggestion() {
                        $("#<%=txtInputPN.ClientId %>").tokenInput("<%=IO.Path.GetFileName(Request.PhysicalPath) %>", {
                            theme: "facebook", searchDelay: 100, minChars: 2, tokenDelimiter: ";", hintText: "Type Part No...", preventDuplicates: true, resizeInput: false
                        });
                        //$("#<%=txtInputPN.ClientId %>").focus();                  
                    }

                    function ShowPricingHistory(anchorElement) {
                        var pn = $(anchorElement).parent().children("#LinePn").val(); $("#txtQueryOHPN").val(pn); popPricingHistory(pn);
                    }

                    function popPricingHistory(PartNo) {
                        busyMode(true); var tbDetail = $("#soDetailList"); tbDetail.empty();                        
                        var pn = PartNo;
                        console.log("pn:" + pn);
                        var postData = JSON.stringify({ PartNo: pn });
                        $.ajax(
                            {
                                type: "POST", url: "<%=IO.Path.GetFileName(Request.PhysicalPath) %>/GetOrderHistory", data: postData, contentType:
                                "application/json; charset=utf-8", dataType: "json",
                                success: function (retData) {
                                    //
                                    var orderlines = $.parseJSON(retData.d); var linesHtml = "";
                                    //var orderlines = odObj.OrderLines;
                                    //console.log("ha1");
                                    $.each(orderlines, function (idx, item) {
                                        //console.log("item.ORDER_QTY:"+item.ORDER_QTY);
                                        linesHtml +=
                                            "<tr>" +
                                                "<td align='center'>" + item.SO_NO + "</td>" +
                                                "<td align='center'>" + item.ORDER_DATE + "</td>" +
                                                "<td align='center'>" + item.LINE_NO + "</td>" +
                                                "<td align='center'>" + item.PART_NO + "</td>" +
                                                "<td align='center'>" + item.UNIT_PRICE + "</td>" +
                                                "<td align='center'>" + item.ORDER_QTY + "</td>" +
                                            "</tr>";
                                    }
                                    );
                                    //console.log("ha2");
                                    if (orderlines.length == 0) { linesHtml = "<td colspan='6' align='center' style='font-style:italic'>No Historical Ordering Data</td>"; }
                                    tbDetail.append(linesHtml);                                    

                                    $("#divSODetail").dialog({
                                        modal: true,
                                        width: $(window).width() - 100,
                                        height: $(window).height() - 100,
                                        open: function (event, ui) { },
                                        title: "Order History"
                                    }
                                    );

                                    busyMode(false);
                                },
                                error: function (msg) {
                                    console.log("call GetSODetail err:" + msg.d);
                                    busyMode(false);
                                }
                            });                        
                    }

                    function busyMode(mode) {
                        (mode == true) ? $("#ctl00_UpdateProgress2").css("visibility", "visible") : $("#ctl00_UpdateProgress2").css("visibility", "hidden");
                        (mode == true) ? $("#imgLoading").css("style", "block") : $("#imgLoading").css("style", "none");
                    }

                </script>
            </td>
        </tr>
    </table>
    <div id="divSODetail" style="display:none; overflow:auto">
        <table width="100%">   
            <tr>
                <td>
                    <table>
                        <tr>
                            <th>Part No.</th>
                            <td>
                                <input type="text" id="txtQueryOHPN" style="width:150px" onkeypress="Click_btnQueryOrderHistory();" />
                            </td>
                            <td>
                                <input type="button" id="btnQueryOrderHistory" onclick='qOrderHistoryAgain()' value="Search" />
                            </td>
                        </tr>
                    </table>
                    <script type="text/javascript">
                        function qOrderHistoryAgain(){
                            popPricingHistory($("#txtQueryOHPN").val());
                        }

                        function Click_btnQueryOrderHistory() {
                            if (event.keyCode == 13) {
                                qOrderHistoryAgain();
                            }
                        }

                    </script>
                </td>
            </tr>         
            <tr>
                <td>
                    <table width="100%">                        
                        <thead>
                            <tr>
                                <th>SO No.</th>
                                <th>Order Date</th>
                                <th>Line No.</th>
                                <th>Part No.</th>
                                <th>Unit Price</th>
                                <th>Qty.</th>
                            </tr>
                        </thead>
                        <tbody id="soDetailList" />
                    </table>
                </td>
            </tr>
        </table>
    </div>
</asp:Content>
